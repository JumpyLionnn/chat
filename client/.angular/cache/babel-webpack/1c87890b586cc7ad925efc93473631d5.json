{"ast":null,"code":"import _asyncToGenerator from \"D:\\\\projects\\\\chat\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Message } from './chatmessage/message.model';\nlet ChatboxComponent = class ChatboxComponent {\n  constructor() {\n    this.allowSendingMessages = false;\n    this.messageContentInput = \"\";\n    this.nameInputContent = \"\";\n    this.messages = [];\n    this.alerts = [];\n  }\n\n  ngOnInit() {}\n\n  onSendMessage() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const content = _this.messageContentInput.trim();\n\n      const username = _this.nameInputContent.trim();\n\n      if (content === \"\") {\n        _this.addAlert(\"error\", \"You can not send an empty message.\");\n\n        return;\n      }\n\n      if (username === \"\") {\n        _this.addAlert(\"error\", \"You dont have a name.\");\n\n        return;\n      }\n\n      const today = new Date();\n      const hours = today.getHours();\n      const minutes = today.getMinutes();\n      const time = (hours > 12 ? hours - 12 : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + (hours > 11 ? \" PM\" : \" AM\");\n\n      _this.messages.push(new Message(username, content, time));\n\n      _this.messageContentInput = \"\";\n      _this.allowSendingMessages = false;\n    })();\n  }\n\n  onMessageContentInputChange(event) {\n    this.messageContentInput = event.target.value;\n\n    if (this.messageContentInput.trim() === \"\") {\n      this.allowSendingMessages = false;\n    } else {\n      this.allowSendingMessages = true;\n    }\n  }\n\n  onInputKeyDown(event) {\n    if (event.key === \"Enter\" && !event.repeat) {\n      this.onSendMessage();\n    }\n  }\n\n  onReplyClick(event) {\n    this.messageContentInput = `@${event.username} `;\n  }\n\n  addAlert(type, content, time = 5000) {\n    const alert = this.alerts[this.alerts.push({\n      type: type,\n      content: content\n    })];\n    setTimeout(() => {\n      this.alerts.splice(this.alerts.indexOf(alert), 1);\n    }, time);\n  }\n\n  onAlertClose(index) {\n    this.alerts.splice(index, 1);\n  }\n\n};\n\n__decorate([ViewChild(\"messages-container\", {\n  static: true\n})], ChatboxComponent.prototype, \"messagesContainerRef\", void 0);\n\nChatboxComponent = __decorate([Component({\n  selector: 'app-chatbox',\n  templateUrl: './chatbox.component.html',\n  styleUrls: ['./chatbox.component.css']\n})], ChatboxComponent);\nexport { ChatboxComponent };","map":{"version":3,"sources":["D:/projects/chat/src/app/chatbox/chatbox.component.ts"],"names":["__decorate","Component","ViewChild","Message","ChatboxComponent","constructor","allowSendingMessages","messageContentInput","nameInputContent","messages","alerts","ngOnInit","onSendMessage","content","trim","username","addAlert","today","Date","hours","getHours","minutes","getMinutes","time","push","onMessageContentInputChange","event","target","value","onInputKeyDown","key","repeat","onReplyClick","type","alert","setTimeout","splice","indexOf","onAlertClose","index","static","prototype","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, ViewChild } from '@angular/core';\r\nimport { Message } from './chatmessage/message.model';\r\nlet ChatboxComponent = class ChatboxComponent {\r\n    constructor() {\r\n        this.allowSendingMessages = false;\r\n        this.messageContentInput = \"\";\r\n        this.nameInputContent = \"\";\r\n        this.messages = [];\r\n        this.alerts = [];\r\n    }\r\n    ngOnInit() {\r\n    }\r\n    async onSendMessage() {\r\n        const content = this.messageContentInput.trim();\r\n        const username = this.nameInputContent.trim();\r\n        if (content === \"\") {\r\n            this.addAlert(\"error\", \"You can not send an empty message.\");\r\n            return;\r\n        }\r\n        if (username === \"\") {\r\n            this.addAlert(\"error\", \"You dont have a name.\");\r\n            return;\r\n        }\r\n        const today = new Date();\r\n        const hours = today.getHours();\r\n        const minutes = today.getMinutes();\r\n        const time = (hours > 12 ? hours - 12 : hours) + \":\" + (minutes < 10 ? \"0\" + minutes : minutes) + (hours > 11 ? \" PM\" : \" AM\");\r\n        this.messages.push(new Message(username, content, time));\r\n        this.messageContentInput = \"\";\r\n        this.allowSendingMessages = false;\r\n    }\r\n    onMessageContentInputChange(event) {\r\n        this.messageContentInput = event.target.value;\r\n        if (this.messageContentInput.trim() === \"\") {\r\n            this.allowSendingMessages = false;\r\n        }\r\n        else {\r\n            this.allowSendingMessages = true;\r\n        }\r\n    }\r\n    onInputKeyDown(event) {\r\n        if (event.key === \"Enter\" && !event.repeat) {\r\n            this.onSendMessage();\r\n        }\r\n    }\r\n    onReplyClick(event) {\r\n        this.messageContentInput = `@${event.username} `;\r\n    }\r\n    addAlert(type, content, time = 5000) {\r\n        const alert = this.alerts[this.alerts.push({\r\n            type: type,\r\n            content: content\r\n        })];\r\n        setTimeout(() => {\r\n            this.alerts.splice(this.alerts.indexOf(alert), 1);\r\n        }, time);\r\n    }\r\n    onAlertClose(index) {\r\n        this.alerts.splice(index, 1);\r\n    }\r\n};\r\n__decorate([\r\n    ViewChild(\"messages-container\", { static: true })\r\n], ChatboxComponent.prototype, \"messagesContainerRef\", void 0);\r\nChatboxComponent = __decorate([\r\n    Component({\r\n        selector: 'app-chatbox',\r\n        templateUrl: './chatbox.component.html',\r\n        styleUrls: ['./chatbox.component.css']\r\n    })\r\n], ChatboxComponent);\r\nexport { ChatboxComponent };\r\n"]},"metadata":{},"sourceType":"module"}